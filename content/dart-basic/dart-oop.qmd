# OOP in Dart

As someone coming from Python, JavaScript, and R backgrounds, you'll find Dart's approach to Object-Oriented Programming (OOP) both familiar and refreshingly structured. Let me introduce you to how OOP works in Dart, with examples that will connect to your existing programming knowledge.

## Classes and Objects in Dart

In Dart, everything revolves around classes and objects, much like in Python. A class is a blueprint for creating objects, and it encapsulates data (properties) and behavior (methods).

Here's a basic example of a class in Dart:

```dart
class Patient {
  // Properties (instance variables)
  String name;
  int age;
  String id;
  
  // Constructor
  Patient(this.name, this.age, this.id);
  
  // Method
  void displayInfo() {
    print('Patient: $name, Age: $age, ID: $id');
  }
}

void main() {
  // Creating an object
  var patient1 = Patient('John Doe', 45, 'P12345');
  
  // Accessing properties
  print(patient1.name);  // John Doe
  
  // Calling methods
  patient1.displayInfo();  // Patient: John Doe, Age: 45, ID: P12345
}
```

Notice how the constructor uses `this.name, this.age, this.id` - this is a shorthand syntax in Dart that both defines the constructor parameters and assigns them to the corresponding instance variables.

## Four Core OOP Principles in Dart

Let's explore how Dart implements the four fundamental principles of OOP:

### 1. Encapsulation

Encapsulation means hiding internal state and requiring all interaction to be performed through an object's methods. In Dart, you can create private variables by prefixing them with an underscore (`_`).

```dart
class MedicalRecord {
  // Private properties (note the underscore)
  String _patientId;
  List<String> _diagnoses = [];
  
  // Constructor
  MedicalRecord(this._patientId);
  
  // Getter
  String get patientId => _patientId;
  
  // Methods to interact with private data
  void addDiagnosis(String diagnosis) {
    _diagnoses.add(diagnosis);
  }
  
  List<String> getDiagnoses() {
    // Return a copy to prevent direct modification
    return List.from(_diagnoses);
  }
}

void main() {
  var record = MedicalRecord('P12345');
  
  // This works
  record.addDiagnosis('Hypertension');
  
  // This would cause an error because _diagnoses is private
  // record._diagnoses.add('Diabetes');  // Error!
  
  // Instead, we use the provided method
  print(record.getDiagnoses());  // [Hypertension]
}
```

Unlike Python where encapsulation is more of a convention (with `_` variables), Dart enforces privacy at the library level. Private members are truly inaccessible outside their library.

### 2. Inheritance

Inheritance allows you to create a new class that reuses, extends, or modifies the behavior of another class. Dart uses the `extends` keyword for inheritance:

```dart
// Parent class
class Person {
  String name;
  int age;
  
  Person(this.name, this.age);
  
  void introduce() {
    print('Hi, I am $name and I am $age years old.');
  }
}

// Child class
class Doctor extends Person {
  String specialty;
  
  // Call the parent constructor using super
  Doctor(String name, int age, this.specialty) : super(name, age);
  
  // Override parent method
  @override
  void introduce() {
    super.introduce();  // Call the parent method
    print('I am a $specialty specialist.');
  }
  
  // Add new method
  void diagnose() {
    print('Dr. $name is examining the patient...');
  }
}

void main() {
  var doctor = Doctor('Sarah Chen', 35, 'Radiology');
  doctor.introduce();
  // Output:
  // Hi, I am Sarah Chen and I am 35 years old.
  // I am a Radiology specialist.
  
  doctor.diagnose();  // Dr. Sarah Chen is examining the patient...
}
```

Notice how we use `super` to call the parent constructor and method. The `@override` annotation is not strictly required but is good practice as it helps catch errors.

### 3. Polymorphism

Polymorphism allows objects of different classes to be treated as objects of a common superclass. The most common use is when a parent class reference is used to refer to a child class object.

```dart
abstract class MedicalProfessional {
  void performDuty();
}

class Doctor implements MedicalProfessional {
  String specialty;
  
  Doctor(this.specialty);
  
  @override
  void performDuty() {
    print('Doctor is diagnosing patients');
  }
}

class Nurse implements MedicalProfessional {
  @override
  void performDuty() {
    print('Nurse is administering medication');
  }
}

void staffDuty(MedicalProfessional staff) {
  staff.performDuty();
}

void main() {
  staffDuty(Doctor('Radiology'));  // Doctor is diagnosing patients
  staffDuty(Nurse());  // Nurse is administering medication
}
```

In this example, both `Doctor` and `Nurse` implement the `MedicalProfessional` interface. The `staffDuty` function accepts any object that implements this interface, demonstrating polymorphism.

### 4. Abstraction

Abstraction means hiding complex implementation details and showing only the necessary features of an object. In Dart, you can use abstract classes and interfaces to achieve abstraction.

```dart
// Abstract class
abstract class Scan {
  // Abstract method (no implementation)
  void perform();
  
  // Concrete method with implementation
  void prepare() {
    print('Preparing the patient for scan');
  }
}

// Concrete implementation
class MRIScan extends Scan {
  @override
  void perform() {
    print('Performing MRI scan');
  }
}

class CTScan extends Scan {
  @override
  void perform() {
    print('Performing CT scan');
  }
}

void main() {
  // Can't instantiate an abstract class
  // var scan = Scan();  // Error!
  
  var mri = MRIScan();
  mri.prepare();  // Inherited from abstract class
  mri.perform();  // Implementation specific to MRIScan
}
```

## Dart-Specific OOP Features

Now that we've covered the basics, let's look at some Dart-specific OOP features that might be different from what you're used to:

### Named Constructors

Dart allows multiple constructors through named constructors:

```dart
class Patient {
  String name;
  int age;
  String id;
  List<String> allergies;
  
  // Primary constructor
  Patient(this.name, this.age, this.id) : allergies = [];
  
  // Named constructor
  Patient.emergency(this.name) : 
    age = 0,
    id = 'EMERGENCY',
    allergies = [];
  
  // Another named constructor with initializer list
  Patient.withAllergies(this.name, this.age, this.id, List<String> allergyList) 
    : allergies = List.from(allergyList);
}

void main() {
  var patient1 = Patient('John', 45, 'P12345');
  var patient2 = Patient.emergency('Unknown');
  var patient3 = Patient.withAllergies('Alice', 30, 'P54321', ['Penicillin', 'Latex']);
}
```

### Factory Constructors

Factory constructors can return instances from cache or instances of subclasses:

```dart
class Singleton {
  static final Singleton _instance = Singleton._internal();
  
  // Private constructor
  Singleton._internal();
  
  // Factory constructor
  factory Singleton() {
    return _instance;
  }
}

void main() {
  var s1 = Singleton();
  var s2 = Singleton();
  print(identical(s1, s2));  // true - they are the same instance
}
```

### Mixins

Mixins allow you to reuse code in multiple class hierarchies:

```dart
mixin Logger {
  void log(String message) {
    print('LOG: $message');
  }
}

mixin TimeStamper {
  String getTimestamp() {
    return DateTime.now().toString();
  }
}

// Use mixins with the 'with' keyword
class DiagnosticReport with Logger, TimeStamper {
  String patientId;
  String findings;
  
  DiagnosticReport(this.patientId, this.findings);
  
  void save() {
    log('Saving report for patient $patientId at ${getTimestamp()}');
    // Save to database logic would go here
  }
}

void main() {
  var report = DiagnosticReport('P12345', 'Normal lung examination');
  report.save();
  // Output: LOG: Saving report for patient P12345 at 2023-08-01 15:30:45.123456
}
```

### Extension Methods

Extension methods allow you to add functionality to existing classes without modifying them:

```dart
// Extending the built-in String class
extension DiagnosticCodeExtension on String {
  bool isValidDiagnosticCode() {
    // Check if the string matches the pattern: Letter followed by 3 digits
    return RegExp(r'^[A-Z][0-9]{3}$').hasMatch(this);
  }
}

void main() {
  var code1 = 'A123';
  var code2 = 'AB12';
  
  print(code1.isValidDiagnosticCode());  // true
  print(code2.isValidDiagnosticCode());  // false
}
```

## Comparing with Your Existing Knowledge

Since you already know Python and JavaScript, here are some key differences in Dart's OOP approach:

1. **Strong Typing**: Unlike JavaScript and Python, Dart is strongly typed (though type annotations can be omitted with `var`).

2. **True Privacy**: Unlike Python's convention-based privacy, Dart enforces privacy at the library level with the `_` prefix.

3. **Interface Implementation**: Dart uses `implements` for interfaces rather than Python's duck typing.

4. **No Multiple Inheritance**: Like JavaScript, Dart doesn't support multiple inheritance, but uses mixins instead.

## Getting Started with OOP in Flutter

In Flutter, nearly everything is an object. Widgets, the building blocks of Flutter apps, are instances of classes. Here's how OOP applies in a simple Flutter widget:

```dart
import 'package:flutter/material.dart';

// StatelessWidget is a class we're extending
class GreetingWidget extends StatelessWidget {
  // Properties
  final String patientName;
  
  // Constructor
  const GreetingWidget({Key? key, required this.patientName}) : super(key: key);
  
  // Override build method
  @override
  Widget build(BuildContext context) {
    return Text('Welcome, $patientName!');
  }
}
```

## Practice Exercise

To solidify your understanding, try creating a simple medical records system in Dart with the following classes:

- A `Person` base class
- A `Patient` class that extends `Person`
- A `MedicalRecord` class that uses encapsulation
- A `Scan` abstract class with concrete implementations

Use the OOP principles we've discussed to structure your code. This exercise will help you practice Dart's syntax while applying OOP concepts.
